name: Pacman Game CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev libsdl2-dev libsdl2-mixer-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test game imports
      run: |
        python -c "import pygame; print('Pygame imported successfully')"
        python -c "import numpy; print('NumPy imported successfully')"
        python -c "from game import Game; print('Game module imported successfully')"
        python -c "from player import Player; print('Player module imported successfully')"
        python -c "from enemy import Enemy; print('Enemy module imported successfully')"

  build-windows:
    runs-on: windows-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name "PacmanGame" main.py
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v3
      with:
        name: pacman-game-windows
        path: dist/PacmanGame.exe

  build-macos:
    runs-on: macos-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name "PacmanGame" main.py
    
    - name: Upload macOS executable
      uses: actions/upload-artifact@v3
      with:
        name: pacman-game-macos
        path: dist/PacmanGame

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build-windows, build-macos]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: pacman-game-windows
        path: ./artifacts/windows/
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: pacman-game-macos
        path: ./artifacts/macos/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸŽ® **Pacman-Style Game Release**
          
          **What's New:**
          - Automated build from latest main branch
          - Cross-platform executables included
          - All tests passing
          
          **Download:**
          - Windows: PacmanGame.exe
          - macOS: PacmanGame
          
          **To run from source:**
          ```bash
          pip install -r requirements.txt
          python main.py
          ```
        draft: false
        prerelease: false
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows/PacmanGame.exe
        asset_name: PacmanGame-Windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos/PacmanGame
        asset_name: PacmanGame-macOS
        asset_content_type: application/octet-stream
