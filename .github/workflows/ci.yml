name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-setuptools
        # Install audio/video libraries for pygame
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        # Install display server for headless testing
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Test game imports
      run: |
        # Test that all modules can be imported without X11 display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        python -c "
        import sys
        sys.path.append('.')
        try:
            import pygame
            pygame.init()
            print('✓ Pygame imported successfully')
        except Exception as e:
            print(f'✗ Pygame import failed: {e}')
            sys.exit(1)
        
        try:
            from game import Game
            from player import Player
            from enemy import Enemy
            from collectible import Gem, PowerUp
            from game_map import GameMap
            from sound_manager import SoundManager
            print('✓ All game modules imported successfully')
        except Exception as e:
            print(f'✗ Game module import failed: {e}')
            sys.exit(1)
        "

    - name: Run basic game tests
      run: |
        export DISPLAY=:99
        python -c "
        import pygame
        pygame.init()
        from game import Game
        
        try:
            # Test game initialization
            game = Game()
            print('✓ Game initializes successfully')
            
            # Test that all components exist
            assert hasattr(game, 'player'), 'Player not found'
            assert hasattr(game, 'enemies'), 'Enemies not found'
            assert hasattr(game, 'gems'), 'Gems not found'
            assert hasattr(game, 'power_ups'), 'Power-ups not found'
            assert len(game.enemies) == 4, f'Expected 4 enemies, got {len(game.enemies)}'
            assert len(game.gems) == 20, f'Expected 20 gems, got {len(game.gems)}'
            assert len(game.power_ups) == 4, f'Expected 4 power-ups, got {len(game.power_ups)}'
            
            print('✓ All game components initialized correctly')
            print('✓ Game tests passed!')
            
        except Exception as e:
            print(f'✗ Game test failed: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        "

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name pacman-game main.py
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: game-executable-linux
        path: dist/pacman-game

  build-windows:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name pacman-game.exe main.py

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: game-executable-windows
        path: dist/pacman-game.exe
